import * as Blockly from "blockly";
import { Environment, Scope, StdFunc } from "./environment";
import { MutatingBlock } from "../legacyMutations";
export declare function forEachChildExpression(block: Blockly.Block, cb: (block: Blockly.Block) => void, recursive?: boolean): void;
export declare function forEachStatementInput(block: Blockly.Block, cb: (block: Blockly.Block) => void): void;
export declare function printScope(scope: Scope, depth?: number): void;
export declare function getLoopVariableField(e: Environment, b: Blockly.Block): Blockly.Block;
export declare function getFunctionName(functionBlock: Blockly.Block): string;
export declare function visibleParams({ comp }: StdFunc, optionalCount: number): pxt.blocks.BlockParameter[];
export declare function countOptionals(b: Blockly.Block, func: StdFunc): number;
export declare function getInputTargetBlock(e: Environment, b: Blockly.Block, n: string): Blockly.Block;
export declare function isMutatingBlock(b: Blockly.Block): b is MutatingBlock;
export declare function escapeVarName(name: string, e: Environment, isFunction?: boolean): string;
export declare function append<T>(a1: T[], a2: T[]): void;
export declare function isFunctionDefinition(b: Blockly.Block): boolean;

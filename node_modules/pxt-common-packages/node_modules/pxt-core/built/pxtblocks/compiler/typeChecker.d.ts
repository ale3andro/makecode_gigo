import * as Blockly from "blockly";
import { Point, Environment, VarInfo, StdFunc } from "./environment";
interface DeclaredVariable {
    name: string;
    type: Point;
    isFunctionParameter?: boolean;
}
export interface IfBlock extends Blockly.Block {
    elseifCount_: number;
    elseCount_: number;
}
export declare function infer(allBlocks: Blockly.Block[], e: Environment, w: Blockly.Workspace): void;
export declare function mkPoint(t: string, isArrayType?: boolean): Point;
export declare function find(p: Point): Point;
export declare function returnType(e: Environment, b: Blockly.Block): Point;
export declare function attachPlaceholderIf(e: Environment, b: Blockly.Block, n: string, type?: string): void;
export declare function getConcreteType(point: Point, found?: Point[]): Point;
export declare function lookup(e: Environment, b: Blockly.Block, name: string): VarInfo;
export declare function getDeclaredVariables(block: Blockly.Block, e: Environment): DeclaredVariable[];
export declare function isFunctionRecursive(e: Environment, b: Blockly.Block, strict: boolean): boolean;
export declare function getEscapedCBParameters(b: Blockly.Block, stdfun: StdFunc, e: Environment): string[];
export declare function defaultValueForType(t: Point): pxt.blocks.JsNode;
export declare function isStringType(type: Point): boolean;
export declare function isBooleanType(type: Point): boolean;
export {};
